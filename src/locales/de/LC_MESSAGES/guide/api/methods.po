# SOME DESCRIPTIVE TITLE.
# Copyright (C) Flying Circus Internet Operations GmbH
# This file is distributed under the same license as the Flying Circus
# Platform package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flying Circus Platform 2021-07-27\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-27 11:10+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../src/guide/api/methods.rst:3
msgid "Methods"
msgstr ""

#: ../../src/guide/api/methods.rst:5
msgid ""
"The API provides two generic XML-RPC methods: one for applying changes to"
" resources (``apply()``) and one for querying for resource information "
"(``query()``)."
msgstr ""

#: ../../src/guide/api/methods.rst:12
msgid "apply([resource_record, ...])"
msgstr ""

#: ../../src/guide/api/methods.rst:14
msgid ""
"``apply()`` accepts a list of resource records. It is guaranteed that "
"either all changes will be applied or, when an error occurs, an XML-RPC "
"fault will be returned and no changes will have been applied. On success "
"the result will be a list of resource records indicating the new state of"
" the resources."
msgstr ""

#: ../../src/guide/api/methods.rst:19
msgid "Resource records are mappings that specify:"
msgstr ""

#: ../../src/guide/api/methods.rst:22
msgid "``__type__``"
msgstr ""

#: ../../src/guide/api/methods.rst:22
msgid "The type of the resource (see :ref:`api-resource-types`). *Mandatory*."
msgstr ""

#: ../../src/guide/api/methods.rst:26
msgid "``__action__``"
msgstr ""

#: ../../src/guide/api/methods.rst:25
msgid ""
"The action to perform (``set`` or ``delete``). If ``__action__`` is "
"ommitted then the API will assume ``set`` as default."
msgstr ""

#: ../../src/guide/api/methods.rst:29
msgid "``any other key``"
msgstr ""

#: ../../src/guide/api/methods.rst:29
msgid "defines a value specific to the ``__type__``."
msgstr ""

#: ../../src/guide/api/methods.rst:39
msgid ""
"Resource records may be sparse: only keys that are given will be updated,"
" others will be kept. You have to pass at least the keys marked as "
"primary keys for a resource, though. Sparse updates allow you to perform "
"changes without having to first retrieve and then save the whole record. "
"It also avoids race conditions that could be introduced through a non-"
"transactional read/update cycle. The result of ``apply()`` will always "
"show the full resource records with all values as they were seen at the "
"end of the transaction."
msgstr ""

#: ../../src/guide/api/methods.rst:47
msgid ""
"If you create new resources through the ``apply()`` method you need to "
"provide enough data to make the record identifiable (all primary key "
"fields) and additional fields that are marked as *required*."
msgstr ""

#: ../../src/guide/api/methods.rst:51
msgid ""
"Deletions may be processed immediately or delayed. For example, virtual "
"machines will be deleted over a period of time according to our retention"
" schedule. Those objects will show that they have been scheduled for "
"deletion in their resource record."
msgstr ""

#: ../../src/guide/api/methods.rst:56
msgid ""
"Also, deleting resources that do not exist is not an error. Deleted or "
"non-existing objects will not have a result in the response."
msgstr ""

#: ../../src/guide/api/methods.rst:61
msgid "query(type, filter=None)"
msgstr ""

#: ../../src/guide/api/methods.rst:63
msgid ""
"The ``query()`` method returns all resources of a given type that are "
"visible to the current access key. Without any filters this includes the "
"data of all child projects."
msgstr ""

#: ../../src/guide/api/methods.rst:67
msgid "The list of valid types is given in the section :ref:`api-resource-types`."
msgstr ""

#: ../../src/guide/api/methods.rst:69
msgid ""
"Filters are specified as a dictionary selecting type-specific keys from "
"the result for exact matches:"
msgstr ""

#: ../../src/guide/api/methods.rst:82
msgid "log(serial=None)"
msgstr ""

#: ../../src/guide/api/methods.rst:84
msgid ""
"The ``log()`` method returns all log entries about any call to the other "
"methods within the same project.  This allows you to integrate our API "
"logging into your own logging infrastructure by calling this method "
"regularly. A serial counter assures that you will receive only new logs "
"and not miss any logs."
msgstr ""

#: ../../src/guide/api/methods.rst:90
msgid "A few rules:"
msgstr ""

#: ../../src/guide/api/methods.rst:92
msgid "Logs are kept 30 days."
msgstr ""

#: ../../src/guide/api/methods.rst:93
msgid "Calls to the ``log()`` method are not logged themselves."
msgstr ""

#: ../../src/guide/api/methods.rst:94
msgid ""
"If a project is deleted, then all associated logs are deleted "
"immediately, too."
msgstr ""

#: ../../src/guide/api/methods.rst:95
msgid ""
"Please do not poll the API in extremely short cycles. Let's say once "
"every few minutes is sufficient."
msgstr ""

#: ../../src/guide/api/methods.rst:97
msgid ""
"Logs only contain calls from the exact API key associated with the "
"project. Calls with access keys from child projects are not shown in the "
"parent log."
msgstr ""

#: ../../src/guide/api/methods.rst:98
msgid "Logs are kept when the API key is reset."
msgstr ""

#: ../../src/guide/api/methods.rst:100
msgid "How to ensure that you receive a gapless log:"
msgstr ""

#: ../../src/guide/api/methods.rst:102
msgid ""
"For the first call you can omit the optional parameter ``serial`` which "
"will return the latest 10 records."
msgstr ""

#: ../../src/guide/api/methods.rst:105
msgid ""
"For future calls you should remember the highest ``serial`` that you have"
" seen in the past and pass it by calling ``log(serial)``."
msgstr ""

#: ../../src/guide/api/methods.rst:108
msgid "Here's an example:"
msgstr ""

#: ../../src/guide/api/methods.rst:129
msgid "The data for ``args`` and ``result`` in the log are JSON-encoded strings."
msgstr ""

